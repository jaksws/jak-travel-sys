name: Debug Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - name: Setup PHP
        uses: ./.github/actions/setup-php
        with:
          coverage: none
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Install PHP dependencies
        timeout-minutes: 10
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: root
        run: |
          echo "PHP Version: $(php -v)"
          echo "Composer Version: $(composer -V)"
          echo "Memory Limit: $(php -r 'echo ini_get(\"memory_limit\");')"
          echo "Installing Composer dependencies..."
          php -d memory_limit=-1 $(which composer) install --prefer-dist --no-interaction --no-progress
          if [ $? -eq 0 ]; then
            echo "✅ Composer install completed successfully"
          else
            echo "❌ Composer install failed"
            exit 1
          fi
      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Install Node.js Dependencies
        run: npm ci
      - name: Debug Environment
        run: |
          php --version
          node --version
          npm --version
          ls -la
          cat package.json
      - name: Build Assets
        run: |
          npm run build
          echo "Checking build output:"
          ls -la public/build/
          echo "Checking .vite subdirectory:"
          ls -la public/build/.vite/
      - name: Verify Manifest
        run: |
          if [ -f "public/build/.vite/manifest.json" ]; then
            echo "✅ manifest.json exists in .vite subdirectory!"
            cat public/build/.vite/manifest.json
            echo "Copying manifest to parent directory for compatibility"
            cp public/build/.vite/manifest.json public/build/manifest.json
          else
            echo "❌ ERROR: manifest.json not found in .vite subdirectory!"
            echo "Directory contents:"
            find public -type f | sort
            exit 1
          fi
          if [ ! -f "public/build/.vite/manifest.json" ]; then
            echo "{}" > public/build/.vite/manifest.json
            echo "⚠️ Temporary manifest.json created for debugging"
          fi
          cp public/build/.vite/manifest.json public/build/manifest.json
      - name: Backup Database
        run: php artisan app:database-backup
      - name: Ensure SQLite database file creation
        run: |
          if [ ! -f "database/database.sqlite" ]; then
            touch database/database.sqlite
            echo "SQLite database file created."
          else
            echo "SQLite database file already exists."
          fi
      - name: Check Application Status
        run: php artisan app:check-status
      - name: Run Migrations
        run: php artisan migrate
      - name: Seed Database
        run: php artisan db:seed
      - name: Run Tests
        run: php artisan test